version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: sportslive-postgres
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Security settings
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      # Only bind to localhost to prevent external access
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sportslive-network

  redis:
    image: redis:7-alpine
    container_name: sportslive-redis
    restart: unless-stopped
    env_file:
      - .env.docker
    ports:
      # Only bind to localhost
      - "127.0.0.1:6379:6379"
    command: >
      redis-server 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
      --protected-mode yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sportslive-network

  # Backup service
  postgres-backup:
    image: postgres:15-alpine
    container_name: sportslive-backup
    env_file:
      - .env.docker
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "
      while true; do
        echo 'Starting backup at $$(date)';
        pg_dump -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
        echo 'Backup completed';
        find /backups -name 'backup_*.sql.gz' -mtime +7 -delete;
        echo 'Old backups cleaned';
        sleep 86400;
      done
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sportslive-network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

networks:
  sportslive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16