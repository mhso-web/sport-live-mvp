import { PrismaClient, Role } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

// ÎçîÎØ∏ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞
const dummyUsers = [
  { username: 'Ï∂ïÍµ¨Îß§ÎãàÏïÑ', email: 'soccer1@test.com', level: 15, experience: 15000 },
  { username: 'ÏÜêÌù•ÎØºÌå¨', email: 'soccer2@test.com', level: 23, experience: 23000 },
  { username: 'Î©îÏãúÏµúÍ≥†', email: 'soccer3@test.com', level: 31, experience: 31000 },
  { username: 'ÏïºÍµ¨Ï≤úÏû¨', email: 'baseball1@test.com', level: 12, experience: 12000 },
  { username: 'KBOÎü¨Î≤Ñ', email: 'baseball2@test.com', level: 28, experience: 28000 },
  { username: 'ÌôàÎü∞Ïôï', email: 'baseball3@test.com', level: 19, experience: 19000 },
  { username: 'LCKÌå¨Î≥¥Ïù¥', email: 'esports1@test.com', level: 35, experience: 35000 },
  { username: 'ÌéòÏù¥Ïª§Ìòï', email: 'esports2@test.com', level: 42, experience: 42000 },
  { username: 'Ìã∞ÏõêÌôîÏù¥ÌåÖ', email: 'esports3@test.com', level: 27, experience: 27000 },
  { username: 'ÎÜçÍµ¨ÎäîÏù∏ÏÉù', email: 'basketball1@test.com', level: 18, experience: 18000 },
  { username: 'NBAÎçïÌõÑ', email: 'basketball2@test.com', level: 25, experience: 25000 },
  { username: 'Ïä¨Îû®Îç©ÌÅ¨', email: 'basketball3@test.com', level: 33, experience: 33000 },
  { username: 'Ïä§Ìè¨Ï∏†ÎßåÏÑ∏', email: 'sports1@test.com', level: 21, experience: 21000 },
  { username: 'Ïö¥ÎèôÏÑ†Ïàò', email: 'sports2@test.com', level: 16, experience: 16000 },
  { username: 'Ï≤¥Ïú°Ïù∏', email: 'sports3@test.com', level: 29, experience: 29000 },
  { username: 'ÎùºÏù¥Î∏åÏ§ëÎèÖ', email: 'live1@test.com', level: 38, experience: 38000 },
  { username: 'Ï§ëÍ≥ÑÎßàÏä§ÌÑ∞', email: 'live2@test.com', level: 45, experience: 45000 },
  { username: 'Í≤ΩÍ∏∞Î∂ÑÏÑùÍ∞Ä', email: 'analysis1@test.com', level: 50, experience: 50000 },
  { username: 'ÌÜµÍ≥ÑÏ†ÑÎ¨∏Í∞Ä', email: 'stats1@test.com', level: 41, experience: 41000 },
  { username: 'Î≤†ÌåÖÍ≥†Ïàò', email: 'betting1@test.com', level: 36, experience: 36000 },
]

// Í≤åÏãúÌåêÎ≥Ñ ÎçîÎØ∏ Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞
const postTemplates = {
  general: [
    { title: 'Ïò§Îäò ÎÇ†Ïî® Ï¢ãÎÑ§Ïöî Ïö¥ÎèôÌïòÍ∏∞ Îî±Ïù¥ÏóêÏöî', content: 'Îã§Îì§ Ïò§Îäò Ïö¥Îèô Í≥ÑÌöç ÏûàÏúºÏã†Í∞ÄÏöî? Ï†ÄÎäî Ï°∞ÍπÖ Îã§ÎÖÄÏôîÎäîÎç∞ ÎÇ†Ïî®Í∞Ä Ï†ïÎßê Ï¢ãÎçîÎùºÍµ¨Ïöî. Ïö¥ÎèôÌïòÍ∏∞ Îî± Ï¢ãÏùÄ ÎÇ†Ïî®ÏûÖÎãàÎã§!' },
    { title: 'Ïä§Ìè¨Ï∏† ÎùºÏù¥Î∏å ÏÇ¨Ïù¥Ìä∏ Ï†ïÎßê Ï¢ãÎÑ§Ïöî', content: 'Îã§Î•∏ ÏÇ¨Ïù¥Ìä∏Îì§Î≥¥Îã§ Ìõ®Ïî¨ ÍπîÎÅîÌïòÍ≥† ÏÇ¨Ïö©ÌïòÍ∏∞ Ìé∏Ìï¥Ïöî. ÌäπÌûà Ïã§ÏãúÍ∞Ñ Ï§ëÍ≥Ñ Í∏∞Îä•Ïù¥ Ï†ïÎßê ÎßàÏùåÏóê Îì≠ÎãàÎã§.' },
    { title: 'Ï≤òÏùå Í∞ÄÏûÖÌñàÏäµÎãàÎã§ Ïûò Î∂ÄÌÉÅÎìúÎ†§Ïöî', content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïä§Ìè¨Ï∏†Î•º Ï¢ãÏïÑÌï¥ÏÑú Í∞ÄÏûÖÌñàÏäµÎãàÎã§. ÏïûÏúºÎ°ú ÏûêÏ£º ÌôúÎèôÌï†Í≤åÏöî. Ïûò Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§!' },
    { title: 'Î†àÎ≤® ÏãúÏä§ÌÖúÏù¥ Ïû¨Î∞åÎÑ§Ïöî', content: 'Îã§Î•∏ Ïª§ÎÆ§ÎãàÌã∞ÏôÄ Îã¨Î¶¨ Î†àÎ≤® ÏãúÏä§ÌÖúÏù¥ ÏûàÏñ¥ÏÑú Ïû¨Î∞åÏñ¥Ïöî. Ïó¥Ïã¨Ìûà ÌôúÎèôÌï¥ÏÑú Î†àÎ≤® Ïò¨Î†§ÏïºÍ≤†ÏäµÎãàÎã§ „Öé„Öé' },
    { title: 'Î™®Î∞îÏùºÏóêÏÑúÎèÑ Ïûò ÎêòÎÇòÏöî?', content: 'ÌòπÏãú Î™®Î∞îÏùº Ïï±ÎèÑ ÏûàÎÇòÏöî? ÏõπÏóêÏÑúÎäî Ïûò ÎêòÎäîÎç∞ Ïï±ÏúºÎ°úÎèÑ Î≥¥Í≥† Ïã∂ÎÑ§Ïöî.' },
  ],
  football: [
    { title: 'ÏÜêÌù•ÎØº Ïò§Îäò Í≤ΩÍ∏∞ Ïñ¥Îï†ÎÇòÏöî?', content: 'Î™ª Î¥§ÎäîÎç∞ Ïò§Îäò ÌÜ†Ìä∏ÎÑò Í≤ΩÍ∏∞ÏóêÏÑú ÏÜêÌù•ÎØº ÌôúÏïΩ Ïñ¥Îï†ÎÇòÏöî? Í≥®ÏùÄ ÎÑ£ÏóàÎÇòÏöî?' },
    { title: 'EPL vs ÎùºÎ¶¨Í∞Ä Ïñ¥ÎîîÍ∞Ä Îçî Ïû¨Î∞åÎÇòÏöî?', content: 'Í∞úÏù∏Ï†ÅÏúºÎ°úÎäî EPLÏù¥ Îçî Î∞ïÏßÑÍ∞ê ÎÑòÏπòÎäî Í≤É Í∞ôÏùÄÎç∞ Ïó¨Îü¨Î∂ÑÎì§ ÏÉùÍ∞ÅÏùÄ Ïñ¥Îñ†Ïã†Í∞ÄÏöî?' },
    { title: 'Ïù¥Î≤à ÏãúÏ¶å Ï±îÏä§ Ïö∞Ïäπ ÏòàÏÉÅ', content: 'Î†àÏïå ÎßàÎìúÎ¶¨ÎìúÍ∞Ä Îòê Ïö∞ÏäπÌï† Í≤É Í∞ôÍ∏¥ ÌïúÎç∞... Îß®ÏãúÌã∞ÎèÑ Í∞ïÎ†•ÌïòÍ≥† Î∞îÎ•¥ÏÇ¨ÎèÑ ÎßåÎßåÏπò ÏïäÎÑ§Ïöî.' },
    { title: 'KÎ¶¨Í∑∏ÎèÑ Î¥êÏ£ºÏÑ∏Ïöî!', content: 'KÎ¶¨Í∑∏ ÏàòÏ§ÄÎèÑ ÎßéÏù¥ Ïò¨ÎùºÏôîÏñ¥Ïöî. Ïö∏ÏÇ∞Ïù¥Îûë Ï†ÑÎ∂Å Í≤ΩÍ∏∞Îäî Ï†ïÎßê Ïû¨Î∞åÏäµÎãàÎã§!' },
    { title: 'ÏõîÎìúÏªµ ÏòàÏÑ† ÏùºÏ†ï ÎÇòÏôîÎÑ§Ïöî', content: 'Îã§ÏùåÎã¨Ïóê Ï§ëÏöîÌïú Í≤ΩÍ∏∞Îì§Ïù¥ ÎßéÎÑ§Ïöî. ÌïúÍµ≠ ÎåÄÌëúÌåÄ ÌôîÏù¥ÌåÖ!' },
  ],
  baseball: [
    { title: 'KBO Ìè¨Ïä§Ìä∏ÏãúÏ¶å ÏòàÏÉÅÌï¥Î¥ÖÏãúÎã§', content: 'LGÍ∞Ä 1ÏúÑ Ìï† Í≤É Í∞ôÏùÄÎç∞ Ïó¨Îü¨Î∂ÑÎì§ ÏÉùÍ∞ÅÏùÄ Ïñ¥Îñ†Ïã†Í∞ÄÏöî? SSGÎèÑ Î¨¥ÏÑ≠Í≥†...' },
    { title: 'Ïò§ÌÉÄÎãà ÏßÑÏßú ÎåÄÎã®ÌïòÎÑ§Ïöî', content: 'Ìà¨ÌÉÄ Í≤∏ÏóÖÌïòÎ©¥ÏÑú Ï†Ä ÏÑ±Ï†ÅÏù¥ Í∞ÄÎä•ÌïúÍ∞ÄÏöî? ÏßÑÏßú Ïô∏Í≥ÑÏù∏ ÎßûÎäî Í≤É Í∞ôÏïÑÏöî.' },
    { title: 'ÌïúÌôî Ïù¥Î≤àÏóî Í∞ÄÏùÑÏïºÍµ¨ Í∞ÄÎä•Ìï†ÍπåÏöî?', content: 'Îß§ÎÖÑ Í∏∞ÎåÄÌïòÎäîÎç∞... Ïù¥Î≤àÏóî Ï†ïÎßê Í∞à Ïàò ÏûàÏùÑ Í≤É Í∞ôÏùÄ ÎäêÎÇåÏù¥ Îì≠ÎãàÎã§!' },
    { title: 'MLB vs KBO ÏàòÏ§Ä Ï∞®Ïù¥', content: 'ÌôïÏã§Ìûà MLBÍ∞Ä ÏàòÏ§ÄÏù¥ ÎÜíÍ∏¥ ÌïòÏßÄÎßå KBOÎèÑ ÎÇòÎ¶Ñ Ïû¨ÎØ∏ÏûàÏñ¥Ïöî. Í∞ÅÏûêÏùò Îß§Î†•Ïù¥ ÏûàÎäî Í≤É Í∞ôÏäµÎãàÎã§.' },
    { title: 'ÏïºÍµ¨Ïû• ÏßÅÍ¥Ä Ï∂îÏ≤ú', content: 'Ïû†Ïã§ÏïºÍµ¨Ïû• Î∂ÑÏúÑÍ∏∞ Ï†ïÎßê Ï¢ãÎçîÎùºÍµ¨Ïöî. Îã§Îì§ Ïñ¥Îäê Íµ¨Ïû• Ï¢ãÏïÑÌïòÏãúÎÇòÏöî?' },
  ],
  esports: [
    { title: 'T1 ÏõîÏ¶à Ïö∞Ïäπ Í∞ÄÎä•Ìï†ÍπåÏöî?', content: 'ÌéòÏù¥Ïª§ ÌèºÏù¥ Ïò¨ÎùºÏò§Í≥† ÏûàÎäîÎç∞ Ïù¥Î≤àÏóî Ï†ïÎßê Ïö∞ÏäπÌï† Ïàò ÏûàÏùÑ Í≤É Í∞ôÏïÑÏöî!' },
    { title: 'LCK vs LPL Í≤∞Ïäπ ÏòàÏÉÅ', content: 'Îß§Î≤à LPLÏù¥ Ïù¥Í∏∞Í∏¥ ÌïòÎäîÎç∞... Ïù¥Î≤àÏóî LCKÍ∞Ä Ïù¥Í≤ºÏúºÎ©¥ Ï¢ãÍ≤†ÎÑ§Ïöî.' },
    { title: 'Ï††ÏßÄ ÏÑ†Ïàò Ïù¥Ï†Å Î£®Î®∏', content: 'Ï¥àÌÅ¨ÎπÑ Îã§Î•∏ ÌåÄ Í∞ÑÎã§Îäî ÏÜåÎ¨∏ Îì§ÏúºÏÖ®ÎÇòÏöî? ÏÇ¨Ïã§Ïù∏ÏßÄ Í∂ÅÍ∏àÌïòÎÑ§Ïöî.' },
    { title: 'Î°§ Ïã†Ï±îÌîÑ ÎÑàÎ¨¥ ÏÇ¨Í∏∞ ÏïÑÎãåÍ∞ÄÏöî?', content: 'Î∞∏Îü∞Ïä§ ÏôÑÏ†Ñ Î∂ïÍ¥¥Îêú Í≤É Í∞ôÏùÄÎç∞... ÎÑàÌîÑ Ïñ∏Ï†ú ÎêòÎÇòÏöî?' },
    { title: 'Î∞úÎ°úÎûÄÌä∏ÎèÑ Ïû¨Î∞åÎçîÎùºÍµ¨Ïöî', content: 'LoLÎßå ÌïòÎã§Í∞Ä Î∞úÎ°úÎûÄÌä∏ Ìï¥Î¥§ÎäîÎç∞ Ïù¥Í≤ÉÎèÑ Ïû¨Î∞åÎÑ§Ïöî. Í∞ôÏù¥ ÌïòÏã§ Î∂Ñ?' },
  ],
  basketball: [
    { title: 'NBA ÏãúÏ¶å ÏãúÏûëÌñàÎÑ§Ïöî!', content: 'ÎìúÎîîÏñ¥ NBA ÏÉà ÏãúÏ¶åÏù¥ ÏãúÏûëÌñàÏäµÎãàÎã§. Îã§Îì§ Ïñ¥Îäê ÌåÄ ÏùëÏõêÌïòÏãúÎÇòÏöî?' },
    { title: 'KBLÎèÑ Ïû¨Î∞åÏñ¥Ïöî', content: 'NBAÎßå Î≥¥ÏßÄ ÎßàÏãúÍ≥† KBLÎèÑ Î¥êÏ£ºÏÑ∏Ïöî. SK vs KCC ÎùºÏù¥Î≤åÏ†ÑÏùÄ Ï†ïÎßê Ïû¨Î∞åÏäµÎãàÎã§!' },
    { title: 'Î•¥Î∏åÎ°† ÏïÑÏßÅÎèÑ ÌòÑÏó≠Ïù¥ÎùºÎãà', content: 'ÎÇòÏù¥Í∞Ä Î™áÏù∏Îç∞ ÏïÑÏßÅÎèÑ Ï†Ä Ïã§Î†•Ïù¥ Ïú†ÏßÄÎêòÎÇòÏöî? ÏßÑÏßú ÎåÄÎã®Ìï©ÎãàÎã§.' },
    { title: 'Ïä¨Îû®Îç©ÌÅ¨ Î≥¥Í≥† ÎÜçÍµ¨ ÏãúÏûëÌñàÏñ¥Ïöî', content: 'Ïñ¥Î¶¥ Îïå Ïä¨Îû®Îç©ÌÅ¨ Î≥¥Í≥† ÎÜçÍµ¨ ÏãúÏûëÌñàÎäîÎç∞ Îã§Îì§ ÎπÑÏä∑ÌïòÏã†Í∞ÄÏöî? „Öé„Öé' },
    { title: '3Ï†êÏäõÏù¥ Ïïà Îì§Ïñ¥Í∞ÄÏöî „Ö†„Ö†', content: 'Ïó∞ÏäµÌï¥ÎèÑ 3Ï†êÏäõ ÏÑ±Í≥µÎ•†Ïù¥ Ïïà Ïò¨ÎùºÍ∞ÄÎÑ§Ïöî. ÌåÅ Ï¢Ä Ï£ºÏÑ∏Ïöî!' },
  ],
}

async function createDummyUsers() {
  console.log('üë• Creating dummy users...')
  const hashedPassword = await bcrypt.hash('password123', 10)
  
  const createdUsers = []
  for (const userData of dummyUsers) {
    try {
      const user = await prisma.user.create({
        data: {
          ...userData,
          passwordHash: hashedPassword,
          role: Role.USER,
        }
      })
      createdUsers.push(user)
      console.log(`‚úÖ Created user: ${user.username}`)
    } catch (error) {
      console.log(`‚ö†Ô∏è  User ${userData.username} might already exist, skipping...`)
    }
  }
  
  return createdUsers
}

async function createDummyPosts(users: any[]) {
  console.log('\nüìù Creating dummy posts...')
  
  // Get all board categories
  const categories = await prisma.boardCategory.findMany()
  const categoryMap = new Map(categories.map(cat => [cat.slug, cat]))
  
  // Create posts for each board
  for (const [boardSlug, posts] of Object.entries(postTemplates)) {
    const category = categoryMap.get(boardSlug)
    if (!category) {
      console.log(`‚ö†Ô∏è  Category ${boardSlug} not found, skipping...`)
      continue
    }
    
    console.log(`\nüìå Creating posts for ${category.name}...`)
    
    // Create 20-30 posts for each board
    const postCount = Math.floor(Math.random() * 11) + 20 // 20-30 posts
    
    for (let i = 0; i < postCount; i++) {
      const postTemplate = posts[i % posts.length]
      const randomUser = users[Math.floor(Math.random() * users.length)]
      const randomDate = new Date()
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 30)) // Random date within last 30 days
      
      try {
        const post = await prisma.post.create({
          data: {
            title: `${postTemplate.title} ${i > posts.length ? `(${Math.floor(i / posts.length) + 1})` : ''}`,
            content: postTemplate.content,
            summary: postTemplate.content.substring(0, 100),
            boardType: category.boardType,
            categoryId: category.id,
            userId: randomUser.id,
            views: Math.floor(Math.random() * 500),
            likesCount: Math.floor(Math.random() * 50),
            isPinned: i === 0 && Math.random() > 0.7, // 30% chance for first post to be pinned
            createdAt: randomDate,
            updatedAt: randomDate,
          }
        })
        
        // Add some likes randomly
        const likeCount = Math.floor(Math.random() * 5)
        for (let j = 0; j < likeCount; j++) {
          const likeUser = users[Math.floor(Math.random() * users.length)]
          try {
            await prisma.postLike.create({
              data: {
                postId: post.id,
                userId: likeUser.id,
              }
            })
          } catch (e) {
            // Ignore duplicate likes
          }
        }
        
        // Add some comments randomly (30% chance)
        if (Math.random() > 0.7) {
          const commentCount = Math.floor(Math.random() * 5) + 1
          for (let j = 0; j < commentCount; j++) {
            const commentUser = users[Math.floor(Math.random() * users.length)]
            await prisma.comment.create({
              data: {
                content: getRandomComment(boardSlug),
                postId: post.id,
                userId: commentUser.id,
              }
            })
          }
        }
        
        console.log(`‚úÖ Created post: ${post.title}`)
      } catch (error) {
        console.error(`‚ùå Error creating post:`, error)
      }
    }
  }
}

function getRandomComment(boardSlug: string): string {
  const comments = {
    general: [
      'Ï¢ãÏùÄ Í∏ÄÏù¥ÎÑ§Ïöî!',
      'Í≥µÍ∞êÌï©ÎãàÎã§ „Öé„Öé',
      'Ï†ÄÎèÑ Í∞ôÏùÄ ÏÉùÍ∞ÅÏù¥ÏóêÏöî',
      'Ïú†Ïö©Ìïú Ï†ïÎ≥¥ Í∞êÏÇ¨Ìï©ÎãàÎã§',
      'Ïû¨Î∞åÍ≤å ÏùΩÏóàÏäµÎãàÎã§',
    ],
    football: [
      'ÏôÑÏ†Ñ Í≥µÍ∞êÌï¥Ïöî!',
      'Ï†ÄÎèÑ Í∑∏ Í≤ΩÍ∏∞ Î¥§ÎäîÎç∞ ÎåÄÎ∞ïÏù¥ÏóàÏ£†',
      'Îã§Ïùå Í≤ΩÍ∏∞ÎèÑ Í∏∞ÎåÄÎêòÎÑ§Ïöî',
      'Ï¢ãÏùÄ Î∂ÑÏÑùÏûÖÎãàÎã§',
      'Ï∂ïÍµ¨Îäî Ïó≠Ïãú Ïû¨Î∞åÏñ¥Ïöî',
    ],
    baseball: [
      'ÏïºÍµ¨ ÏµúÍ≥†!',
      'Ïù¥Î≤à ÏãúÏ¶å Ï†ïÎßê Ïû¨Î∞åÎÑ§Ïöî',
      'Ï¢ãÏùÄ Ï†ïÎ≥¥ Í∞êÏÇ¨Ìï©ÎãàÎã§',
      'Ï†ÄÎèÑ ÏßÅÍ¥Ä Í∞ÄÍ≥† Ïã∂Ïñ¥Ïöî',
      'Ïö∞Î¶¨ ÌåÄ ÌôîÏù¥ÌåÖ!',
    ],
    esports: [
      '„Ñπ„Öá Ïù∏Ï†ïÌï©ÎãàÎã§',
      'T1 ÌôîÏù¥ÌåÖ!',
      'Ïù¥Î≤à Ìå®Ïπò ÏßÑÏßú Î≥ÑÎ°úÏòàÏöî',
      'ÌîÑÎ°ú Í≤ΩÍ∏∞Îäî Îã§Î•¥ÎÑ§Ïöî',
      'LCK ÏµúÍ≥†!',
    ],
    basketball: [
      'ÎÜçÍµ¨Îäî Ï†ïÎßê Ïû¨Î∞åÏ£†',
      'NBA ÏàòÏ§ÄÏù¥ Îã§Î•¥Í∏¥ Ìï¥Ïöî',
      'Ï†ÄÎèÑ ÎÜçÍµ¨ Ï¢ãÏïÑÌï¥Ïöî',
      'Ï¢ãÏùÄ Í≤ΩÍ∏∞ÏòÄÏäµÎãàÎã§',
      'Îã§Ïùå Í≤ΩÍ∏∞ÎèÑ Í∏∞ÎåÄ!',
    ],
  }
  
  const boardComments = comments[boardSlug as keyof typeof comments] || comments.general
  return boardComments[Math.floor(Math.random() * boardComments.length)]
}

async function main() {
  try {
    console.log('üöÄ Starting dummy data generation...\n')
    
    // Create dummy users
    const users = await createDummyUsers()
    
    if (users.length === 0) {
      console.log('‚ö†Ô∏è  No new users created. They might already exist.')
      // Get existing users for post creation
      const existingUsers = await prisma.user.findMany({
        where: {
          email: {
            in: dummyUsers.map(u => u.email)
          }
        }
      })
      
      if (existingUsers.length > 0) {
        await createDummyPosts(existingUsers)
      } else {
        console.log('‚ùå No users found to create posts')
      }
    } else {
      // Create dummy posts
      await createDummyPosts(users)
    }
    
    console.log('\n‚úÖ Dummy data generation completed!')
    
    // Print statistics
    const userCount = await prisma.user.count()
    const postCount = await prisma.post.count()
    const commentCount = await prisma.comment.count()
    
    console.log('\nüìä Database Statistics:')
    console.log(`- Total Users: ${userCount}`)
    console.log(`- Total Posts: ${postCount}`)
    console.log(`- Total Comments: ${commentCount}`)
    
  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()